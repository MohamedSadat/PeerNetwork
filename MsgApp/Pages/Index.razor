@page "/"
@using Blazored.Toast.Services;
@using PeerLib.Data;
@inject HttpClient Http
@inject IToastService toast
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject WalletAppModel wallet
@inject NavigationManager Nav

<div class="container">
    <div class="row">
        <div class="col text-center">
           <p class="h6">Total Balance</p>
            <p class="h4">@Balance</p>
            <br />
            <br />
            <br />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            <button class="btn btn-primary">Deposit</button>
        </div>
        <div class="col text-center">
            <button class="btn btn-primary">Withdraw</button>
        </div>
    </div>
   

</div>

<p>@err</p>
@code {
    long Balance = 0;
    string err="";
    protected override async Task OnInitializedAsync()
    {
        if(await localStorage.ContainKeyAsync("firstrun"))
        {
            wallet.FirstRun=Convert.ToInt32(  await localStorage.GetItemAsStringAsync("firstrun"));
            wallet.PrivateKey = await localStorage.GetItemAsStringAsync("privatekey");
            wallet.NodeAddress = await localStorage.GetItemAsStringAsync("NodeAddress");
            wallet.PublicKey = await localStorage.GetItemAsStringAsync("publickey");
wallet.PublicKeyXML = await localStorage.GetItemAsStringAsync("PublicKeyXML");
            wallet.PrivateKeyXml = await localStorage.GetItemAsStringAsync("PrivateKeyXml");



        }
        else
        {

         //   await   localStorage.SetItemAsStringAsync("firstrun", "1");
         //   await localStorage.SetItemAsStringAsync("privatekey", "");
          //  await localStorage.SetItemAsStringAsync("NodeAddress", "");
            Nav.NavigateTo("/setting");

        }
        //  Http.DefaultRequestHeaders.Clear();
        //  Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", StateContainer.Token);
        try
        {
            if(string.IsNullOrWhiteSpace(wallet.PublicKey)==false)
            Balance = await Http.GetFromJsonAsync<long>($"Balance/GetBalance/{wallet.PublicKey}");
           
        }
        catch (Exception ex)
        {
            err = ex.Message;
        }
    
    }
}