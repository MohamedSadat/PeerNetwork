@page "/sendmessage"
@using PeerLib.Data;
@using PeerLib.Services;
@using System.Text.Json;
@using System.Security.Cryptography;
@using System.Text;
@inject HttpClient Http
@inject NavigationManager Nav
@inject IToastService toast
@inject MsgHashService msghash
@inject WalletAppModel wallet
<PageTitle>Add Message</PageTitle>
<p>@err</p>

<h1>Add Message</h1>
<EditForm Model="trans.Message" OnValidSubmit="PostMessage">
    <DataAnnotationsValidator />
<ValidationSummary />
<label class="form-label" for="Sender">Sender</label>
    <InputText class="form-control" id="Sender" @bind-Value="trans.Message.Sender" />
    <label class="form-label" for="Receiver">Receiver</label>
    <InputText class="form-control" id="Receiver" @bind-Value="trans.Message.Receiver" />

<label class="form-label" for="Txt">Text</label>
    <InputText class="form-control" id="Txt" @bind-Value="trans.Message.Txt" />
     <label class="form-label" for="Amount">Amount</label>
  @*   <InputNumber class="form-control" id="Amount" @bind-Value="msg.Amount" /> *@ 
    <input class="form-control" type="number" @bind="trans.Message.Amount" />
    <label class="form-label" for="Fee">Fee</label>
    <input class="form-control" type="number" @bind="trans.Message.Fee" />

    <label class="form-label" for="MsgHash">MsgHash</label>
    <InputText class="form-control" id="MsgHash" @bind-Value="trans.Message.MsgHash" disabled />

<button class="m-1 p-1 btn btn-primary" type="submit"  >Post Message</button>

</EditForm>

@code {


    TransactionModel trans = new TransactionModel();
    string err = "";
    protected override async Task OnInitializedAsync()
    {
        trans.PublicKeyXML = wallet.PublicKeyXML;
        trans.PrivateKeyXml = wallet.PrivateKeyXml;
        trans.Message.Sender = wallet.PublicKey;
        trans.Message.PublicKey = wallet.PublicKeyXML;

    }
    private async Task PostMessage()
    {
        try
        {
          if(await  Encrypt()==false)
            {
                return;
            }

            if (await Sign() == true)
            {
                Http.DefaultRequestHeaders.Clear();


                var rpost = await Http.PostAsJsonAsync("Message/AddMsg", trans);
                if (rpost.IsSuccessStatusCode)
                {
                    toast.ShowSuccess("Message Posted");
                    trans.Message = new MessageModel();
                }
                else
                {
                    err = await rpost.Content.ReadAsStringAsync();
                    toast.ShowError(err);
                    //   msg=new MessageModel();
                }
            }

        }
        catch (Exception ex)
        {
            err = ex.Message;
        }
    }
    async Task<bool> Encrypt()
    {
 
        var r = await Http.PostAsJsonAsync("Digital/EncryptMsg", trans);
        if (r.IsSuccessStatusCode)
        {
            var resmodel = await r.Content.ReadAsStringAsync();
            trans.Message.Txt = resmodel;
            toast.ShowSuccess("Encryptes");
            return true;   
        }
        else
        {
            var err = await r.Content.ReadAsStringAsync();
            toast.ShowError(err);
            return false;
        }

    }

    async Task<bool> Sign()
    {
        trans.PrivateKey =wallet.PrivateKey;// "6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b";
        trans.Message.PublicKey = wallet.PublicKeyXML;
        trans.Message.MsgHash = msghash.HashAlgoStd(trans.Message);
        var r = await Http.PostAsJsonAsync("Digital/Sign", trans);
        if (r.IsSuccessStatusCode)
        {
            var resmodel = await r.Content.ReadFromJsonAsync<TransactionModel>();
            // var resmodel = JsonSerializer.Deserialize<TransactionModel>(resstring);
            trans.PublicKeyXML = resmodel.PublicKeyXML;
            trans.Message.Signature= resmodel.Message.Signature;
            return true;
        }
        else
        {
            err = await r.Content.ReadAsStringAsync();
            toast.ShowError(err);
            return false;
        }
    }
}
